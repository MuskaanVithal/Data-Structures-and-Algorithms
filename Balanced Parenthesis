/*
For a given a string expression containing only round brackets or parentheses, 
check if they are balanced or not. Brackets are said to be balanced if the 
bracket which opens last, closes first.

Input Format:
The first and the only line of input contains a string expression without any spaces in between.

Output Format:
The only line of output prints 'true' or 'false'.

Constraints:
1 <= N <= 10^7
 Where N is the length of the expression.

Time Limit: 1sec
*/

#include <iostream>
#include <string>
#include<stack>
using namespace std;

bool check(char opening, char closing){
    if(opening == '(' && closing ==')') return true;
    else if(opening == '{' && closing =='}') return true;
    else return false;
}

bool isBalanced(string expression) 
{
    stack<char> s;
    
    for(int i =0; i<expression.length(); i++){
        
        if(expression[i]=='(' || expression[i]=='{'){
            s.push(expression[i]);
        }
        else if(expression[i]==')' || expression[i]=='}'){
            if(s.empty() || !check(s.top(),expression[i])){
                return false;
            }
            else{
                s.pop();
            }
        }
    }
    
    return s.empty() ? true:false;
}

int main() 
{
    string input;
    cin >> input;
    cout << ((isBalanced(input)) ? "true" : "false");
}
