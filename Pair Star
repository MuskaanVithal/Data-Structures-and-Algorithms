/*

Given a string S, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a "*".

Input format :
String S

Output format :
Modified string

Constraints :
0 <= |S| <= 1000
where |S| represents length of string S.

Sample Input 1 :
hello

Sample Output 1:
hel*lo

*/
**************************************************************************************************************************************************************************************************************************************************************

#include <iostream>
using namespace std;

int len( char input[]){
    int count=0;
    int i=0;
    while(input[i]!='\0'){
        count++;
        i++;
    }
    return count;
}

void Star(char arr[],int start){
	//Base Case: Reached End Of String
	if(arr[start]=='\0'){
		return;
	}   
	//Recursive Call 
	Star(arr,start+1);
	if(arr[start] == arr[start+1]){
		int l = len(arr);
		//Extending the string
		arr[l+1] = '\0';
		int i;
		//To shift the letters by 1
		for(i = l-1;i>=start +1;i--){
			arr[i+1] = arr [i];
		}
		//Entering * in between
		arr[start+1] = '*';
	}
}

void pairStar(char input[]) {
    
    Star(input,0);
}

int main() {
   char input[100];
   cin.getline(input, 100);
   pairStar(input);
   cout << input << endl;
}

