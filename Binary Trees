/*
For a given a Binary Tree of type integer, take input and then print the complete information of every node, when traversed in a level-order fashion.

For a given Binary Tree of type integer and a number X, find whether a node exists in the tree with data X or not.

For a given Binary Tree of integers, find and return the height of the tree.

For a given Binary Tree of type integer, update it with its corresponding mirror image.
*********************************************************************************************************************************************************************/

#include <iostream>
#include <queue>

template <typename T>
class BinaryTreeNode {
   public:
    T data;
    BinaryTreeNode<T>* left;
    BinaryTreeNode<T>* right;

    BinaryTreeNode(T data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

using namespace std;

void printLevelWise(BinaryTreeNode<int> *root) {
    if(root == NULL){
        return;
    }
    
    queue<BinaryTreeNode<int> *> pN;
    pN.push(root);
    
    while(pN.size()!=0){    
	BinaryTreeNode<int> *front = pN.front();
    pN.pop();
        
        cout<<front->data<<":";
            if(front ->left != NULL){
                cout<<"L:"<<front->left->data; 
                pN.push(front->left);
            }
        	else{
                cout<<"L:-1"; 
            }
        	if(front->right != NULL){
                cout<<",R:"<<front->right->data<<endl;
                pN.push(front->right);
            }
        	else{
                cout<<",R:-1"<<endl;
            }
    }
}

BinaryTreeNode<int>* takeInput() {
    int rootData;

    cin >> rootData;
    if (rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while (!q.empty()) {
        BinaryTreeNode<int>* currentNode = q.front();
        q.pop();
        int leftChild, rightChild;

        cin >> leftChild;
        if (leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode->left = leftNode;
            q.push(leftNode);
        }

        cin >> rightChild;
        if (rightChild != -1) {
            BinaryTreeNode<int>* rightNode =
                new BinaryTreeNode<int>(rightChild);
            currentNode->right = rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

bool isNodePresent(BinaryTreeNode<int> *root, int x) {
    if(root == NULL)	return false;
    
    int check = false;
    
    if(root->data == x){
        check = true;
        return true;
    }
    
    if(check == false && root->left != NULL){
        check = isNodePresent(root->left,x);
    }
    if(check == false && root->right != NULL){
        check = isNodePresent(root->right,x);
    }
    return check;
}

int height(BinaryTreeNode<int>* root) {
    if(root == NULL)	return 0;
    
    int num1 = 0, num2 = 0;
    
    if(root->left != NULL){
     	num1 = height(root->left);
    }
    if(root->right != NULL){
        num2 = height(root->right);
    }
    
    if(num1>=num2){
        return 1 + num1;
    }
    else{
        return 1 + num2;
    }
}

void mirrorBinaryTree(BinaryTreeNode<int>* root) {
    if(root == NULL)	return;
    
     if(root->left==NULL && root->right==NULL)
        return;
    
    mirrorBinaryTree(root->left);
    mirrorBinaryTree(root->right);
    
    BinaryTreeNode<int> * temp = root->left;
    root->left=root->right;
    root->right=temp;
}

int main() {
    BinaryTreeNode<int>* root = takeInput();
    
    printLevelWise(root);
    
    int x;
    cin >> x;
    cout << ((isNodePresent(root, x)) ? "true" : "false");
    
    cout << height(root);
    
    mirrorBinaryTree(root);
    printLevelATNewLine(root);
}

